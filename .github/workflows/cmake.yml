name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    types: ["closed"]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:

  build_and_publish:
    
    strategy:
      matrix:
        # Disabling Windows for now
        #os: [ubuntu-latest, windows-latest, macos-latest]
        #os: [ubuntu-latest, macos-latest]
        # Working only on Windows
        os: [windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      
      # Check out the repository (basically downloads the source code)
      - uses: actions/checkout@v3
      
      # GLib on Windows stuff
      
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MSYS
        if: matrix.os == 'windows-latest'
        
      - shell: msys2 {0}
        run: |
          pacman --noconfirm -S mingw-w64-x86_64-{toolchain,pkg-config,glib2}
        if: matrix.os == 'windows-latest'




      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: List stuff
        run: ls -R
        

      - name: Create Artifact (non-windows)
        run: |
          mkdir ${{ matrix.os }}-release
          cp build/Mandelbrot* ${{ matrix.os }}-release/
        if: matrix.os != 'windows-latest'
          
      - name: Create Artifact (windows)
        run: |
          mkdir ${{ matrix.os }}-release
          cp build/Release/Mandelbrot.exe ${{ matrix.os }}-release/
        if: matrix.os == 'windows-latest'
      
      
      - name: ZIP Artifact (non-windows)
        run: |
          zip -r ${{ matrix.os }}.zip ${{ matrix.os }}-release/
        if: matrix.os != 'windows-latest'
          
      - name: ZIP Artifact (windows)
        run: |
          7z a "${{ matrix.os }}.zip" "${{ matrix.os }}-release/"
        if: matrix.os == 'windows-latest'
      
      
      - name: Publish Artifact
        uses: actions/upload-artifact@v3
        with:
          retention-days: 1
          name: ${{ matrix.os }}
          path: ${{ matrix.os }}.zip

  release:
    name: "Prelease"
    needs: build_and_publish
    runs-on: ubuntu-latest
    steps:
      # We don't need the repo, grab all artifacts from the build stage
      - uses: actions/download-artifact@v2
      
      - name: Display fetched artifacts
        run: ls -R
      
      - name: Create Release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: false
          title: "Development Build"
          files: |
            windows-latest/windows-latest.zip
          #  ubuntu-latest/ubuntu-latest.zip
          #  macos-latest/macos-latest.zip
          # Disabling Windows: windows-latest/windows-latest.zip
